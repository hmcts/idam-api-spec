/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.external;

import uk.gov.hmcts.reform.idam.api.external.model.ErrorResponse;
import java.util.Map;
import uk.gov.hmcts.reform.idam.api.external.model.TokenResponse;
import uk.gov.hmcts.reform.idam.api.external.model.WellKnownConfig;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:49.793+01:00")

@Api(value = "OpenIdConnect", description = "the OpenIdConnect API")
public interface OpenIdConnectApi {

    Logger log = LoggerFactory.getLogger(OpenIdConnectApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Request Access Token", nickname = "accessToken", notes = "Partner makes a request to the token endpoint by adding the following parameters described below ", response = TokenResponse.class, tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authorization token", response = TokenResponse.class),
        @ApiResponse(code = 400, message = "One or more required parameters are invalid", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Username/Client_id password combination not found", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "client_id was not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/token",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<TokenResponse> accessToken(@ApiParam(value = "The OAuth2 Grant Type", required=true) @RequestParam(value="grant_type", required=true)  String grantType,@ApiParam(value = "" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "A previously issued, still valid refresh_token required when grant_type=refresh_token ") @RequestParam(value="refresh_token", required=false)  String refreshToken,@ApiParam(value = "OAuth2 code returned by the /authorize call. Required when grant_type=authorization_code ") @RequestParam(value="code", required=false)  String code,@ApiParam(value = "URI to redirect the user to after successful authentication. This URL must match one of the registered URLs for the OAuth2 application linked to the service initiating the authentication flow. ") @RequestParam(value="redirect_uri", required=false)  String redirectUri,@ApiParam(value = "OAuth2 client id of the service initiating the OAuth2 flow.") @RequestParam(value="client_id", required=false)  String clientId,@ApiParam(value = "OAuth2 client sercret of the service initiating the OAuth2 flow.") @RequestParam(value="client_secret", required=false)  String clientSecret,@ApiParam(value = "The required scopes for the access token") @RequestParam(value="scope", required=false)  String scope,@ApiParam(value = "The username of the user for implicit grant_type of Password") @RequestParam(value="username", required=false)  String username,@ApiParam(value = "The password of the user for implicit grant_type of Password") @RequestParam(value="password", required=false)  String password,@ApiParam(value = "Used in PKCE extension to Authorization Code flow. A base64 url encoded random string with a minimum length of 43 characters and a maximum length of 128 characters. ") @RequestParam(value="code_verifier", required=false)  String codeVerifier) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"access_token\" : \"access_token\",  \"refresh_token\" : \"refresh_token\",  \"scope\" : \"scope\",  \"id_token\" : \"id_token\",  \"token_type\" : \"token_type\",  \"expires_in\" : \"expires_in\"}", TokenResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "OpenID Connect End Session", nickname = "endSession", notes = "Ends the session of the user", tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 302, message = "End Session success. Redirecting to post logout URI"),
        @ApiResponse(code = 400, message = "One or more parameters are invalid", response = ErrorResponse.class) })
    @RequestMapping(value = "/endSession",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> endSession(@ApiParam(value = "Users id token to help OP link the session") @Valid @RequestParam(value = "id_token_hint", required = false) String idTokenHint,@ApiParam(value = "Optional uri to redirect the user to after logout") @Valid @RequestParam(value = "post_logout_redirect_uri", required = false) String postLogoutRedirectUri,@ApiParam(value = "Optional application state parameter") @Valid @RequestParam(value = "state", required = false) String state) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Browser OpenID Connect Authorize", nickname = "oauth2Authorize", notes = "Initiate an OpenID Connect Authorization flow", tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 302, message = "Redirection to login page successful."),
        @ApiResponse(code = 400, message = "Request is invalid. One or more required parameters may have been omitted", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "client_id not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/authorize",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> oauth2Authorize(@ApiParam(value = "OAuth2 client id of the service initiating the OAuth2 flow.") @Valid @RequestParam(value = "client_id", required = false) String clientId,@ApiParam(value = "URI to redirect the user to after successful authentication. This URL must match one of the registered URLs for the OAuth2 application linked to the service initiating the authentication flow. ") @Valid @RequestParam(value = "redirect_uri", required = false) String redirectUri,@ApiParam(value = "Optional state to be sent back to the initiating service after successful authentication.") @Valid @RequestParam(value = "state", required = false) String state,@ApiParam(value = "Optional parameter required for openid hybrid flow requests.") @Valid @RequestParam(value = "nonce", required = false) String nonce,@ApiParam(value = "Response type to use for this request", defaultValue = "code") @Valid @RequestParam(value = "response_type", required = false, defaultValue="code") String responseType,@ApiParam(value = "Optional scopes to request.") @Valid @RequestParam(value = "scope", required = false) String scope,@ApiParam(value = "Informs Authorization server of the mechanism to be used for returning parameters. Use is not recommended. ") @Valid @RequestParam(value = "response_mode", required = false) String responseMode,@ApiParam(value = "ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. ") @Valid @RequestParam(value = "display", required = false) String display,@ApiParam(value = "Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. ") @Valid @RequestParam(value = "prompt", required = false) String prompt,@ApiParam(value = "Maximum Authentication Age") @Valid @RequestParam(value = "max_age", required = false) String maxAge,@ApiParam(value = "Requested Authentication Context Class Reference values") @Valid @RequestParam(value = "acr_values", required = false) String acrValues,@ApiParam(value = "Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. ") @Valid @RequestParam(value = "id_token_hint", required = false) String idTokenHint,@ApiParam(value = "Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. ") @Valid @RequestParam(value = "login_hint", required = false) String loginHint,@ApiParam(value = "Used in PKCE extension to Authorization Code flow. A base64 URL encoded string derived from the code verifier using one of the allowed transformation methods. ") @Valid @RequestParam(value = "code_challenge", required = false) String codeChallenge,@ApiParam(value = "Used in PKCE extension to Authorization Code flow. Transformation method used to derive code challenge from the code verifier. The value can only be either 'S256' or 'plain'. ") @Valid @RequestParam(value = "code_challenge_method", required = false) String codeChallengeMethod) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Direct Post OpenID Connect Authorize", nickname = "oauth2AuthorizePost", notes = "Initiate an OpenID Connect Authorization flow", tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 302, message = "Redirection to login page successful."),
        @ApiResponse(code = 400, message = "Request is invalid. One or more required parameters may have been omitted", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "client_id not found", response = ErrorResponse.class) })
    @RequestMapping(value = "/authorize",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> oauth2AuthorizePost(@ApiParam(value = "OAuth2 client id of the service initiating the OAuth2 flow.") @RequestParam(value="client_id", required=false)  String clientId,@ApiParam(value = "URI to redirect the user to after successful authentication. This URL must match one of the registered URLs for the OAuth2 application linked to the service initiating the authentication flow. ") @RequestParam(value="redirect_uri", required=false)  String redirectUri,@ApiParam(value = "Optional state to be sent back to the initiating service after successful authentication.") @RequestParam(value="state", required=false)  String state,@ApiParam(value = "Optional parameter required for openid hybrid flow requests.") @RequestParam(value="nonce", required=false)  String nonce,@ApiParam(value = "Response type to use for this request", defaultValue="code") @RequestParam(value="response_type", required=false)  String responseType,@ApiParam(value = "Optional scopes to request.") @RequestParam(value="scope", required=false)  String scope,@ApiParam(value = "Informs Authorization server of the mechanism to be used for returning parameters. Use is not recommended. ") @RequestParam(value="response_mode", required=false)  String responseMode,@ApiParam(value = "ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. ") @RequestParam(value="display", required=false)  String display,@ApiParam(value = "Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. ") @RequestParam(value="prompt", required=false)  String prompt,@ApiParam(value = "Maximum Authentication Age") @RequestParam(value="max_age", required=false)  String maxAge,@ApiParam(value = "Requested Authentication Context Class Reference values") @RequestParam(value="acr_values", required=false)  String acrValues,@ApiParam(value = "Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. ") @RequestParam(value="id_token_hint", required=false)  String idTokenHint,@ApiParam(value = "Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. ") @RequestParam(value="login_hint", required=false)  String loginHint,@ApiParam(value = "Used in PKCE extension to Authorization Code flow. A base64 URL encoded string derived from the code verifier using one of the allowed transformation methods. ") @RequestParam(value="code_challenge", required=false)  String codeChallenge,@ApiParam(value = "Used in PKCE extension to Authorization Code flow. Transformation method used to derive code challenge from the code verifier. The value can only be either 'S256' or 'plain'. ") @RequestParam(value="code_challenge_method", required=false)  String codeChallengeMethod) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Request Info For User of the Authorization token", nickname = "userInfo", notes = "Partner makes a request to the userinfo endpoint by adding the following parameters describerd below ", response = Object.class, responseContainer = "Map", tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Map.class, responseContainer = "Map"),
        @ApiResponse(code = 401, message = "The supplied authorization is invalid or has expired.", response = ErrorResponse.class) })
    @RequestMapping(value = "/userinfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Map<String, Object>> userInfo(@ApiParam(value = "" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "") @Valid @RequestParam(value = "claims", required = false) String claims) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"key\" : \"{}\"}", Map.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Request Info For User of the Authorization token", nickname = "userInfoPost", notes = "Partner makes a request to the userinfo endpoint by adding the following parameters describerd below ", response = Object.class, responseContainer = "Map", tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Map.class, responseContainer = "Map"),
        @ApiResponse(code = 401, message = "The supplied authorization is invalid or has expired.", response = ErrorResponse.class) })
    @RequestMapping(value = "/userinfo",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Map<String, Object>> userInfoPost(@ApiParam(value = "" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "") @RequestParam(value="claims", required=false)  String claims) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"key\" : \"{}\"}", Map.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Well Known OpenID Config", nickname = "wellKnownOpenidConfiguration", notes = "Returns information required for OIDC Discovery", response = WellKnownConfig.class, tags={ "OpenID Connect", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = WellKnownConfig.class) })
    @RequestMapping(value = "/.well-known/openid-configuration",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<WellKnownConfig> wellKnownOpenidConfiguration() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"request_parameter_supported\" : false,  \"claims_parameter_supported\" : false,  \"introspection_endpoint\" : \"introspection_endpoint\",  \"check_session_iframe\" : \"check_session_iframe\",  \"scopes_supported\" : [ \"scopes_supported\", \"scopes_supported\" ],  \"issuer\" : \"issuer\",  \"id_token_encryption_enc_values_supported\" : [ \"id_token_encryption_enc_values_supported\", \"id_token_encryption_enc_values_supported\" ],  \"acr_values_supported\" : [ \"acr_values_supported\", \"acr_values_supported\" ],  \"authorization_endpoint\" : \"authorization_endpoint\",  \"request_object_encryption_enc_values_supported\" : [ \"request_object_encryption_enc_values_supported\", \"request_object_encryption_enc_values_supported\" ],  \"rcs_request_encryption_alg_values_supported\" : [ \"rcs_request_encryption_alg_values_supported\", \"rcs_request_encryption_alg_values_supported\" ],  \"claims_supported\" : [ \"claims_supported\", \"claims_supported\" ],  \"rcs_request_signing_alg_values_supported\" : [ \"rcs_request_signing_alg_values_supported\", \"rcs_request_signing_alg_values_supported\" ],  \"token_endpoint_auth_methods_supported\" : [ \"token_endpoint_auth_methods_supported\", \"token_endpoint_auth_methods_supported\" ],  \"token_endpoint\" : \"token_endpoint\",  \"response_types_supported\" : [ \"response_types_supported\", \"response_types_supported\" ],  \"request_uri_parameter_supported\" : false,  \"rcs_response_encryption_enc_values_supported\" : [ \"rcs_response_encryption_enc_values_supported\", \"rcs_response_encryption_enc_values_supported\" ],  \"end_session_endpoint\" : \"end_session_endpoint\",  \"rcs_request_encryption_enc_values_supported\" : [ \"rcs_request_encryption_enc_values_supported\", \"rcs_request_encryption_enc_values_supported\" ],  \"version\" : \"version\",  \"rcs_response_encryption_alg_values_supported\" : [ \"rcs_response_encryption_alg_values_supported\", \"rcs_response_encryption_alg_values_supported\" ],  \"userinfo_endpoint\" : \"userinfo_endpoint\",  \"id_token_encryption_alg_values_supported\" : [ \"id_token_encryption_alg_values_supported\", \"id_token_encryption_alg_values_supported\" ],  \"jwks_uri\" : \"jwks_uri\",  \"subject_types_supported\" : [ \"subject_types_supported\", \"subject_types_supported\" ],  \"id_token_signing_alg_values_supported\" : [ \"id_token_signing_alg_values_supported\", \"id_token_signing_alg_values_supported\" ],  \"registration_endpoint\" : \"registration_endpoint\",  \"request_object_signing_alg_values_supported\" : [ \"request_object_signing_alg_values_supported\", \"request_object_signing_alg_values_supported\" ],  \"request_object_encryption_alg_values_supported\" : [ \"request_object_encryption_alg_values_supported\", \"request_object_encryption_alg_values_supported\" ],  \"rcs_response_signing_alg_values_supported\" : [ \"rcs_response_signing_alg_values_supported\", \"rcs_response_signing_alg_values_supported\" ]}", WellKnownConfig.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OpenIdConnectApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
