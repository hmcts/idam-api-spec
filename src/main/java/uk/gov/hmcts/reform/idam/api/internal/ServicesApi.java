/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.ArrayOfServices;
import uk.gov.hmcts.reform.idam.api.internal.model.Service;
import uk.gov.hmcts.reform.idam.api.internal.model.ServiceUpdate;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "services", description = "the services API")
public interface ServicesApi {

    Logger log = LoggerFactory.getLogger(ServicesApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "createService", notes = "Creates/Registers a new service", response = Service.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Service was created", response = Service.class),
        @ApiResponse(code = 403, message = "You were unable to create that service, you don't have permission"),
        @ApiResponse(code = 408, message = "Service already exists. Use PUT to update") })
    @RequestMapping(value = "/services",
        method = RequestMethod.POST)
    default ResponseEntity<Service> createService(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ServiceUpdate request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoProviders\" : [ \"ssoProviders\", \"ssoProviders\" ],  \"activationRedirectUrl\" : \"activationRedirectUrl\",  \"allowedRoles\" : [ \"allowedRoles\", \"allowedRoles\" ],  \"onboardingEndpoint\" : \"onboardingEndpoint\",  \"oauth2ClientId\" : \"oauth2ClientId\",  \"onboardingRoles\" : [ \"onboardingRoles\", \"onboardingRoles\" ],  \"description\" : \"description\",  \"label\" : \"label\",  \"selfRegistrationAllowed\" : true,  \"oauth2Scope\" : \"oauth2Scope\"}", Service.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getRolesForService", notes = "Gets all the roles assigned to a given service", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array of roles associated with this", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class),
        @ApiResponse(code = 404, message = "The service was not found") })
    @RequestMapping(value = "/services/{serviceId}/roles",
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings> getRolesForService(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The serviceId of the roles to retrieve",required=true) @PathVariable("serviceId") String serviceId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getService", notes = "Gets the specified service from the system", response = Service.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The specified service", response = Service.class),
        @ApiResponse(code = 404, message = "The service was not found") })
    @RequestMapping(value = "/services/{serviceId}",
        method = RequestMethod.GET)
    default ResponseEntity<Service> getService(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The serviceId to retrieve",required=true) @PathVariable("serviceId") String serviceId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoProviders\" : [ \"ssoProviders\", \"ssoProviders\" ],  \"activationRedirectUrl\" : \"activationRedirectUrl\",  \"allowedRoles\" : [ \"allowedRoles\", \"allowedRoles\" ],  \"onboardingEndpoint\" : \"onboardingEndpoint\",  \"oauth2ClientId\" : \"oauth2ClientId\",  \"onboardingRoles\" : [ \"onboardingRoles\", \"onboardingRoles\" ],  \"description\" : \"description\",  \"label\" : \"label\",  \"selfRegistrationAllowed\" : true,  \"oauth2Scope\" : \"oauth2Scope\"}", Service.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getServices", notes = "Returns an array of all the services", response = ArrayOfServices.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array of the registered services in the system", response = ArrayOfServices.class) })
    @RequestMapping(value = "/services",
        method = RequestMethod.GET)
    default ResponseEntity<ArrayOfServices> getServices(@ApiParam(value = "The Base64-encoded authorization token" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "If supplied, filters the list of services which are associated to this clientId") @Valid @RequestParam(value = "clientId", required = false) String clientId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", ArrayOfServices.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "putRolesForService", notes = "Modifies the roles for a given service", response = Service.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated service", response = Service.class),
        @ApiResponse(code = 404, message = "The service was not found") })
    @RequestMapping(value = "/services/{serviceId}/roles",
        method = RequestMethod.PUT)
    default ResponseEntity<Service> putRolesForService(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The serviceId of the roles to retrieve",required=true) @PathVariable("serviceId") String serviceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoProviders\" : [ \"ssoProviders\", \"ssoProviders\" ],  \"activationRedirectUrl\" : \"activationRedirectUrl\",  \"allowedRoles\" : [ \"allowedRoles\", \"allowedRoles\" ],  \"onboardingEndpoint\" : \"onboardingEndpoint\",  \"oauth2ClientId\" : \"oauth2ClientId\",  \"onboardingRoles\" : [ \"onboardingRoles\", \"onboardingRoles\" ],  \"description\" : \"description\",  \"label\" : \"label\",  \"selfRegistrationAllowed\" : true,  \"oauth2Scope\" : \"oauth2Scope\"}", Service.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateService", notes = "Updates a specified service in the system", response = Service.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Service was updated", response = Service.class),
        @ApiResponse(code = 404, message = "The service was not found") })
    @RequestMapping(value = "/services/{serviceId}",
        method = RequestMethod.PUT)
    default ResponseEntity<Service> updateService(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The serviceId of the service to update",required=true) @PathVariable("serviceId") String serviceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ServiceUpdate request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoProviders\" : [ \"ssoProviders\", \"ssoProviders\" ],  \"activationRedirectUrl\" : \"activationRedirectUrl\",  \"allowedRoles\" : [ \"allowedRoles\", \"allowedRoles\" ],  \"onboardingEndpoint\" : \"onboardingEndpoint\",  \"oauth2ClientId\" : \"oauth2ClientId\",  \"onboardingRoles\" : [ \"onboardingRoles\", \"onboardingRoles\" ],  \"description\" : \"description\",  \"label\" : \"label\",  \"selfRegistrationAllowed\" : true,  \"oauth2Scope\" : \"oauth2Scope\"}", Service.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ServicesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
