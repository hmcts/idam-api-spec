/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.Account;
import uk.gov.hmcts.reform.idam.api.internal.model.DeletedData;
import uk.gov.hmcts.reform.idam.api.internal.model.OrganisationMFAResult;
import uk.gov.hmcts.reform.idam.api.internal.model.PactState;
import uk.gov.hmcts.reform.idam.api.internal.model.TestUserRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "testing-support", description = "the testing-support API")
public interface TestingSupportApi {

    Logger log = LoggerFactory.getLogger(TestingSupportApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "cacheRefresh", notes = "Refresh the cache", tags={  })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/testing-support/cache/refresh",
        method = RequestMethod.POST)
    default ResponseEntity<Void> cacheRefresh() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "createTestAccount", notes = "Create a test account", response = Account.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Account created", response = Account.class),
        @ApiResponse(code = 409, message = "The user already exists.") })
    @RequestMapping(value = "/testing-support/accounts",
        method = RequestMethod.POST)
    default ResponseEntity<Account> createTestAccount(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TestUserRequest request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoId\" : \"ssoId\",  \"forename\" : \"forename\",  \"ssoProvider\" : \"ssoProvider\",  \"linkedRoles\" : [ \"linkedRoles\", \"linkedRoles\" ],  \"surname\" : \"surname\",  \"roles\" : [ \"roles\", \"roles\" ],  \"active\" : true,  \"id\" : \"id\",  \"lastModified\" : \"lastModified\",  \"locked\" : true,  \"email\" : \"email\"}", Account.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "deleteAllTestData", notes = "Delete all test data", response = DeletedData.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Test data deleted OK", response = DeletedData.class) })
    @RequestMapping(value = "/testing-support/test-data",
        method = RequestMethod.DELETE)
    default ResponseEntity<DeletedData> deleteAllTestData(@ApiParam(value = "Prefix for test data names") @Valid @RequestParam(value = "testDataPrefix", required = false) String testDataPrefix,@ApiParam(value = "Test user names to delete") @Valid @RequestParam(value = "userNames", required = false) List<String> userNames,@ApiParam(value = "Test role names to delete") @Valid @RequestParam(value = "roleNames", required = false) List<String> roleNames,@ApiParam(value = "Test service names to delete") @Valid @RequestParam(value = "serviceNames", required = false) List<String> serviceNames,@ApiParam(value = "Flag to run this call asynchronously and skip waiting for its response") @Valid @RequestParam(value = "async", required = false) Boolean async) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"userNamesFailed\" : [ \"userNamesFailed\", \"userNamesFailed\" ],  \"testDataPrefix\" : \"testDataPrefix\",  \"serviceNamesDeleted\" : [ \"serviceNamesDeleted\", \"serviceNamesDeleted\" ],  \"roleNamesRequested\" : [ \"roleNamesRequested\", \"roleNamesRequested\" ],  \"serviceNamesFound\" : [ \"serviceNamesFound\", \"serviceNamesFound\" ],  \"serviceNamesRequested\" : [ \"serviceNamesRequested\", \"serviceNamesRequested\" ],  \"roleNamesFailed\" : [ \"roleNamesFailed\", \"roleNamesFailed\" ],  \"userNamesRequested\" : [ \"userNamesRequested\", \"userNamesRequested\" ],  \"serviceNamesFailed\" : [ \"serviceNamesFailed\", \"serviceNamesFailed\" ],  \"userNamesFound\" : [ \"userNamesFound\", \"userNamesFound\" ],  \"roleNamesDeleted\" : [ \"roleNamesDeleted\", \"roleNamesDeleted\" ],  \"userNamesDeleted\" : [ \"userNamesDeleted\", \"userNamesDeleted\" ],  \"roleNamesFound\" : [ \"roleNamesFound\", \"roleNamesFound\" ]}", DeletedData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "deleteTestAccount", notes = "Delete an account", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user has been deleted"),
        @ApiResponse(code = 404, message = "User does not exist") })
    @RequestMapping(value = "/testing-support/accounts/{username:.+}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTestAccount(@ApiParam(value = "",required=true) @PathVariable("username") String username) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "deleteTestRole", notes = "Delete a role", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The role has been deleted"),
        @ApiResponse(code = 404, message = "Could not find the role") })
    @RequestMapping(value = "/testing-support/roles/{role:.+}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTestRole(@ApiParam(value = "",required=true) @PathVariable("role") String role) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "deleteTestService", notes = "Delete a service and his roles", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service has been deleted"),
        @ApiResponse(code = 404, message = "Could not find the service") })
    @RequestMapping(value = "/testing-support/services/{service:.+}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTestService(@ApiParam(value = "",required=true) @PathVariable("service") String service) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getAccount", notes = "Fetch a test account via ID", response = Account.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The requested account was found and returned", response = Account.class),
        @ApiResponse(code = 404, message = "The account doesn't exist.") })
    @RequestMapping(value = "/testing-support/accounts/{accountId:.+}",
        method = RequestMethod.GET)
    default ResponseEntity<Account> getAccount(@ApiParam(value = "The id of the user",required=true) @PathVariable("accountId") String accountId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"ssoId\" : \"ssoId\",  \"forename\" : \"forename\",  \"ssoProvider\" : \"ssoProvider\",  \"linkedRoles\" : [ \"linkedRoles\", \"linkedRoles\" ],  \"surname\" : \"surname\",  \"roles\" : [ \"roles\", \"roles\" ],  \"active\" : true,  \"id\" : \"id\",  \"lastModified\" : \"lastModified\",  \"locked\" : true,  \"email\" : \"email\"}", Account.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getOrganisationMFA", notes = "Gets the organisation mfa by userId", response = OrganisationMFAResult.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The organisation mfa info has been found", response = OrganisationMFAResult.class),
        @ApiResponse(code = 404, message = "User Not Found") })
    @RequestMapping(value = "/testing-support/mock/refdata/external/v1/organisations/mfa",
        method = RequestMethod.GET)
    default ResponseEntity<OrganisationMFAResult> getOrganisationMFA(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userId", required = true) String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"mfa\" : \"mfa\"}", OrganisationMFAResult.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getPinByUserId", notes = "Gets the pin by userId", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The user pin has been found", response = String.class),
        @ApiResponse(code = 404, message = "User Not Found or Not a PIN User") })
    @RequestMapping(value = "/testing-support/accounts/pin/{userId:.+}",
        method = RequestMethod.GET)
    default ResponseEntity<String> getPinByUserId(@ApiParam(value = "",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "pactStateChange", notes = "Handles the requested state changes for pact testing", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "State changed and response contains relevant data", response = Object.class),
        @ApiResponse(code = 400, message = "State parameter is malformed or unsupported") })
    @RequestMapping(value = "/testing-support/pact-state-change",
        method = RequestMethod.POST)
    default ResponseEntity<Object> pactStateChange(@ApiParam(value = "Pact will supply the declared state in this format" ,required=true )  @Valid @RequestBody PactState pactState) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "patchService", notes = "Apply partial modifications to a service", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The service has been updated"),
        @ApiResponse(code = 404, message = "Could not find the service") })
    @RequestMapping(value = "/testing-support/services/{service:.+}",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> patchService(@ApiParam(value = "",required=true) @PathVariable("service") String service,@ApiParam(value = "" ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.PatchRequest request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "purgePendingUsers", notes = "Purge pending users", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Job started") })
    @RequestMapping(value = "/testing-support/purgependingusers",
        method = RequestMethod.POST)
    default ResponseEntity<Void> purgePendingUsers() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TestingSupportApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
