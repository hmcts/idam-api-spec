/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "roles", description = "the roles API")
public interface RolesApi {

    Logger log = LoggerFactory.getLogger(RolesApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "createRole", notes = "Creates a new role in the system", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The role was created successfully", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class),
        @ApiResponse(code = 403, message = "You were unable to create that role, you don't have permission"),
        @ApiResponse(code = 409, message = "That role already exists. Use PUT to update") })
    @RequestMapping(value = "/roles",
        method = RequestMethod.POST)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.Role> createRole(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "" ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.Role request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.Role.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getAllRoles", notes = "Returns an array of all roles", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfRoles.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of roles available", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfRoles.class) })
    @RequestMapping(value = "/roles",
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfRoles> getAllRoles(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "Filters the roles on a given filter type (e.g filterType=service)") @Valid @RequestParam(value = "filterType", required = false) String filterType,@ApiParam(value = "The value of the filter to use (e.g filterValue=CMC)") @Valid @RequestParam(value = "filterValue", required = false) String filterValue) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfRoles.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getAssignableRoles", notes = "Gets an array of roles that this role is allowed to assign to other users.", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of the roles that this role is allowed to assign", response = uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class),
        @ApiResponse(code = 404, message = "The role was not found") })
    @RequestMapping(value = "/roles/{roleId}/assignableRoles",
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings> getAssignableRoles(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The id of the role to retrieve the assignable roles for",required=true) @PathVariable("roleId") String roleId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getRole", notes = "Gets the specified role from the system.", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The role that was requested", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class),
        @ApiResponse(code = 404, message = "That role was not found") })
    @RequestMapping(value = "/roles/{roleId}",
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.Role> getRole(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The roleId of the role to retrieve",required=true) @PathVariable("roleId") String roleId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.Role.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getRoleByName", notes = "Gets the specified role from the system.", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The role that was requested", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class),
        @ApiResponse(code = 404, message = "That role was not found") })
    @RequestMapping(value = "/roles/name/{name}",
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.Role> getRoleByName(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The name of the role to retrieve",required=true) @PathVariable("name") String name) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.Role.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateAssignableRoles", notes = "Updates the array of assignable roles that the specified role can assign to other users.", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The assignable roles were updated for the specified role", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class),
        @ApiResponse(code = 401, message = "You don't have permission to update the role"),
        @ApiResponse(code = 404, message = "The role was not found") })
    @RequestMapping(value = "/roles/{roleId}/assignableRoles",
        method = RequestMethod.PUT)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.Role> updateAssignableRoles(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The id of the role to update",required=true) @PathVariable("roleId") String roleId,@ApiParam(value = "An request containing an array of roles that the current role can assign to other users." ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.ArrayOfStrings request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.Role.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "updateRole", notes = "Updates a specified role in the system", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The role was updated", response = uk.gov.hmcts.reform.idam.api.shared.model.Role.class),
        @ApiResponse(code = 403, message = "You don't have permission to update that role"),
        @ApiResponse(code = 404, message = "The role was not found") })
    @RequestMapping(value = "/roles/{roleId}",
        method = RequestMethod.PUT)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.Role> updateRole(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The id of the role to update",required=true) @PathVariable("roleId") String roleId,@ApiParam(value = "The role data that you wish to update" ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.UpdateRole request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.Role.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default RolesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
