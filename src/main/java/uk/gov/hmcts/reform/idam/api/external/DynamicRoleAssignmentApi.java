/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.external;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:51.927+01:00")

@Api(value = "DynamicRoleAssignment", description = "the DynamicRoleAssignment API")
public interface DynamicRoleAssignmentApi {

    Logger log = LoggerFactory.getLogger(DynamicRoleAssignmentApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "assignUserToRole", notes = "Assign the authenticated user to a role. The role is unique identified by its name.", tags={ "Dynamic Role Assignment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The role assignment is successful."),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired or does not have 'manage-role' scope."),
        @ApiResponse(code = 412, message = "User is already assigned to this role or the role does not exist.") })
    @RequestMapping(value = "/account/role",
        method = RequestMethod.POST)
    default ResponseEntity<Void> assignUserToRole(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "the body of the User JSON object containing the fields to update." ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.RoleDefinition request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DynamicRoleAssignmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "unassignUserFromRole", notes = "Removes the assignment of the authenticated user to the role, uniquely identified by its name.", tags={ "Dynamic Role Assignment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The role assignment is successfully removed."),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired or does not have 'manage-role' scope."),
        @ApiResponse(code = 412, message = "User is not assigned to this role or the role does not exist.") })
    @RequestMapping(value = "/account/role",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> unassignUserFromRole(@ApiParam(value = "The access token granted to the client application after user authentication. The role is unassigned from the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "the body of the User JSON object containing the fields to update." ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.RoleDefinition request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DynamicRoleAssignmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
