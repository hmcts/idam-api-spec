/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.external;

import uk.gov.hmcts.reform.idam.api.external.model.DeletePolicyResponse;
import uk.gov.hmcts.reform.idam.api.external.model.EvaluatePoliciesRequest;
import uk.gov.hmcts.reform.idam.api.external.model.EvaluatePoliciesResponse;
import uk.gov.hmcts.reform.idam.api.external.model.GetAllPoliciesResponse;
import uk.gov.hmcts.reform.idam.api.external.model.GetPolicyResponse;
import uk.gov.hmcts.reform.idam.api.external.model.PostPolicyRequest;
import uk.gov.hmcts.reform.idam.api.external.model.PostPolicyResponse;
import uk.gov.hmcts.reform.idam.api.external.model.PutPolicyRequest;
import uk.gov.hmcts.reform.idam.api.external.model.PutPolicyResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:51.960+01:00")

@Api(value = "Policy", description = "the Policy API")
public interface PolicyApi {

    Logger log = LoggerFactory.getLogger(PolicyApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Delete", nickname = "delete", notes = "Delete policy", response = DeletePolicyResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = DeletePolicyResponse.class),
        @ApiResponse(code = 400, message = "Bad request error"),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 404, message = "Policy not found"),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies/{resourceId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<DeletePolicyResponse> delete(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The unique identifier of the policy",required=true) @PathVariable("resourceId") String resourceId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"lastModifiedDate\" : \"lastModifiedDate\",  \"subject\" : { },  \"lastModifiedBy\" : \"lastModifiedBy\",  \"active\" : true,  \"description\" : \"description\",  \"resources\" : [ \"resources\", \"resources\" ],  \"actionValues\" : { },  \"creationDate\" : \"creationDate\",  \"resourceAttributes\" : [ \"{}\", \"{}\" ],  \"condition\" : { },  \"resourceTypeUuid\" : \"resourceTypeUuid\",  \"createdBy\" : \"createdBy\",  \"name\" : \"name\",  \"applicationName\" : \"applicationName\"}", DeletePolicyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "evaluate", notes = "Evaluate policies", response = EvaluatePoliciesResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = EvaluatePoliciesResponse.class),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies/evaluate",
        method = RequestMethod.POST)
    default ResponseEntity<EvaluatePoliciesResponse> evaluate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EvaluatePoliciesRequest request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", EvaluatePoliciesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get policy", nickname = "get", notes = "Retrieve policy", response = GetPolicyResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetPolicyResponse.class),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 404, message = "Policy not found"),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies/{resourceId}",
        method = RequestMethod.GET)
    default ResponseEntity<GetPolicyResponse> get(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The unique identifier of the policy",required=true) @PathVariable("resourceId") String resourceId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"lastModifiedDate\" : \"lastModifiedDate\",  \"subject\" : { },  \"lastModifiedBy\" : \"lastModifiedBy\",  \"active\" : true,  \"description\" : \"description\",  \"resources\" : [ \"resources\", \"resources\" ],  \"actionValues\" : { },  \"creationDate\" : \"creationDate\",  \"resourceAttributes\" : [ \"{}\", \"{}\" ],  \"condition\" : { },  \"resourceTypeUuid\" : \"resourceTypeUuid\",  \"createdBy\" : \"createdBy\",  \"name\" : \"name\",  \"applicationName\" : \"applicationName\"}", GetPolicyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all policies", nickname = "getAll", notes = "Get all policies", response = GetAllPoliciesResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = GetAllPoliciesResponse.class),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies",
        method = RequestMethod.GET)
    default ResponseEntity<GetAllPoliciesResponse> getAll(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"result\" : [ {    \"lastModifiedDate\" : \"lastModifiedDate\",    \"subject\" : { },    \"lastModifiedBy\" : \"lastModifiedBy\",    \"active\" : true,    \"description\" : \"description\",    \"resources\" : [ \"resources\", \"resources\" ],    \"actionValues\" : { },    \"creationDate\" : \"creationDate\",    \"resourceAttributes\" : [ \"{}\", \"{}\" ],    \"condition\" : { },    \"resourceTypeUuid\" : \"resourceTypeUuid\",    \"createdBy\" : \"createdBy\",    \"name\" : \"name\",    \"applicationName\" : \"applicationName\"  }, {    \"lastModifiedDate\" : \"lastModifiedDate\",    \"subject\" : { },    \"lastModifiedBy\" : \"lastModifiedBy\",    \"active\" : true,    \"description\" : \"description\",    \"resources\" : [ \"resources\", \"resources\" ],    \"actionValues\" : { },    \"creationDate\" : \"creationDate\",    \"resourceAttributes\" : [ \"{}\", \"{}\" ],    \"condition\" : { },    \"resourceTypeUuid\" : \"resourceTypeUuid\",    \"createdBy\" : \"createdBy\",    \"name\" : \"name\",    \"applicationName\" : \"applicationName\"  } ],  \"resultCount\" : 0}", GetAllPoliciesResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Create Policy with Client-Assigned ID", nickname = "post", notes = "Create or update policy", response = PostPolicyResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success", response = PostPolicyResponse.class),
        @ApiResponse(code = 400, message = "Bad request error. The cause can be the following: * Missing privilege name * Invalid json provided in the request * Invalid value found in json * Invalid policy name provided in json * Resource name and JSON body name do not match * Query id missing UID * Invalid query id * Invalid search filter * Empty privilege name * Entitlement value was NULL * No resource type was expected * Policy defines invalid resource type * The provided resourceId does not match to the UUID in the json file"),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies",
        method = RequestMethod.POST)
    default ResponseEntity<PostPolicyResponse> post(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "" ,required=true )  @Valid @RequestBody PostPolicyRequest requestPayload) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"lastModifiedDate\" : \"lastModifiedDate\",  \"subject\" : { },  \"lastModifiedBy\" : \"lastModifiedBy\",  \"active\" : true,  \"description\" : \"description\",  \"resources\" : [ \"resources\", \"resources\" ],  \"actionValues\" : { },  \"creationDate\" : \"creationDate\",  \"resourceAttributes\" : [ \"{}\", \"{}\" ],  \"condition\" : { },  \"resourceTypeUuid\" : \"resourceTypeUuid\",  \"createdBy\" : \"createdBy\",  \"name\" : \"name\",  \"applicationName\" : \"applicationName\"}", PostPolicyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Create Policy with Client-Assigned ID", nickname = "put", notes = "Create or update policy", response = PutPolicyResponse.class, tags={ "Policy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PutPolicyResponse.class),
        @ApiResponse(code = 400, message = "Bad request error. The cause can be the following: * Missing privilege name * Invalid json provided in the request * Invalid value found in json * Invalid policy name provided in json * Resource name and JSON body name do not match * Query id missing UID * Invalid query id * Invalid search filter * Empty privilege name * Entitlement value was NULL * No resource type was expected * Policy defines invalid resource type * The provided resourceId does not match to the UUID in the json file"),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 500, message = "Unexpected server error happened during the process") })
    @RequestMapping(value = "/policies/{resourceId}",
        method = RequestMethod.PUT)
    default ResponseEntity<PutPolicyResponse> put(@ApiParam(value = "The access token granted to the client application after user authentication. The role is assigned to the user the client application is acting on behalf of." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The unique identifier of the policy",required=true) @PathVariable("resourceId") String resourceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody PutPolicyRequest requestPayload) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"lastModifiedDate\" : \"lastModifiedDate\",  \"subject\" : { },  \"lastModifiedBy\" : \"lastModifiedBy\",  \"active\" : true,  \"description\" : \"description\",  \"resources\" : [ \"resources\", \"resources\" ],  \"actionValues\" : { },  \"creationDate\" : \"creationDate\",  \"resourceAttributes\" : [ \"{}\", \"{}\" ],  \"condition\" : { },  \"resourceTypeUuid\" : \"resourceTypeUuid\",  \"createdBy\" : \"createdBy\",  \"name\" : \"name\",  \"applicationName\" : \"applicationName\"}", PutPolicyResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PolicyApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
