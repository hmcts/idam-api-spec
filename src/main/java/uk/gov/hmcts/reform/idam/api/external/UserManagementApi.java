/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.external;

import uk.gov.hmcts.reform.idam.api.external.model.UserRegistrationRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:51.786+01:00")

@Api(value = "UserManagement", description = "the UserManagement API")
public interface UserManagementApi {

    Logger log = LoggerFactory.getLogger(UserManagementApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "deleteUser", nickname = "deleteUserByUserId", notes = "Delete the user.", authorizations = {
        @Authorization(value = "auth", scopes = {
            @AuthorizationScope(scope = "manage-user", description = "allows modifying a User resource")
            })
    }, tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User deleted successfully."),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'manage-user' scope, or the target user's roles are not included in the current user's assignable roles."),
        @ApiResponse(code = 404, message = "The user to be deleted could not be found.") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUserByUserId(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The userId of the user to be deleted.",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "getUserByUserid", nickname = "getUserByUserId", notes = "Get the user details given their userId.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, authorizations = {
        @Authorization(value = "auth", scopes = {
            @AuthorizationScope(scope = "manage-user", description = "allows modifying a User resource")
            })
    }, tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The details of the requested user", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'manage-user' scope."),
        @ApiResponse(code = 404, message = "The user does not exist.") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.User> getUserByUserId(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The userId of the user to be found (e.g. 'f65bd0f5-e733-4f4a-9ed4-901444ece494').",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.User.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "registration", notes = "Self register a user via a 3rd party registration process.", tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Registration accepted."),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'create-user' scope."),
        @ApiResponse(code = 409, message = "User with this email already exists.") })
    @RequestMapping(value = "/users/registration",
        method = RequestMethod.POST)
    default ResponseEntity<Void> registration(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "the body of the User JSON object." ,required=true )  @Valid @RequestBody UserRegistrationRequest request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removeSSOFromUser", nickname = "removeSSOFromUser", notes = "Remove SSO from the user.", authorizations = {
        @Authorization(value = "auth", scopes = {
            @AuthorizationScope(scope = "manage-user", description = "allows modifying a User resource")
            })
    }, tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "SSO for the user removed successfully."),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'manage-user' scope, or the target user's roles are not included in the current user's assignable roles."),
        @ApiResponse(code = 404, message = "The user where SSO is to be removed could not be found.") })
    @RequestMapping(value = "/users/{userId}/sso",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> removeSSOFromUser(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The userId of the user where SSO is to be removed.",required=true) @PathVariable("userId") String userId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Search for Users matching the ElasticSearch query", nickname = "searchUsers", notes = "", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, responseContainer = "List", tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing or invalid bearer token"),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'search-user' scope.") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<uk.gov.hmcts.reform.idam.api.shared.model.User>> searchUsers(@NotNull @ApiParam(value = "A query string in ElasticSearch Query DSL", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "The number of items per page, default of 20") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "The index of the page of items, starting at 0 for the first page") @Valid @RequestParam(value = "page", required = false) Integer page) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ \"\", \"\" ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "updateUserDetails", nickname = "updateUserDetails", notes = "Update the user details.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, authorizations = {
        @Authorization(value = "auth", scopes = {
            @AuthorizationScope(scope = "manage-user", description = "allows modifying a User resource")
            })
    }, tags={ "User Management", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User updated successfully.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class),
        @ApiResponse(code = 400, message = "Required parameters are missing or invalid."),
        @ApiResponse(code = 401, message = "Missing bearer token."),
        @ApiResponse(code = 403, message = "Bearer token is expired, or it doesn't have the 'manage-user' scope."),
        @ApiResponse(code = 404, message = "The user to be updated could not be found.") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.User> updateUserDetails(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization,@ApiParam(value = "The userId of the user to be updated.",required=true) @PathVariable("userId") String userId,@ApiParam(value = "the body of the User JSON object containing the fields to update." ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.User body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.User.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UserManagementApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
