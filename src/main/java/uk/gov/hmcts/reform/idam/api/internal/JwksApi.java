/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.JsonWebKeySet;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "jwks", description = "the jwks API")
public interface JwksApi {

    Logger log = LoggerFactory.getLogger(JwksApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "jsonWebKeySet", notes = "Returns all JWKs used to sign all IdAM issued JWTs. This is a set of keys containing the public keys that should be used to verify any JWT issued by the authorization server.", response = JsonWebKeySet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "JSON Web Key Set (JWKS)", response = JsonWebKeySet.class) })
    @RequestMapping(value = "/jwks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<JsonWebKeySet> jsonWebKeySet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"keys\" : [ {    \"d\" : \"d\",    \"e\" : \"e\",    \"use\" : \"use\",    \"crv\" : \"crv\",    \"kid\" : \"kid\",    \"x5c\" : [ \"x5c\", \"x5c\" ],    \"k\" : \"k\",    \"dp\" : \"dp\",    \"dq\" : \"dq\",    \"n\" : \"n\",    \"p\" : \"p\",    \"kty\" : \"kty\",    \"q\" : \"q\",    \"x5t\" : \"x5t\",    \"qi\" : \"qi\",    \"x\" : \"x\",    \"y\" : \"y\",    \"alg\" : \"alg\"  }, {    \"d\" : \"d\",    \"e\" : \"e\",    \"use\" : \"use\",    \"crv\" : \"crv\",    \"kid\" : \"kid\",    \"x5c\" : [ \"x5c\", \"x5c\" ],    \"k\" : \"k\",    \"dp\" : \"dp\",    \"dq\" : \"dq\",    \"n\" : \"n\",    \"p\" : \"p\",    \"kty\" : \"kty\",    \"q\" : \"q\",    \"x5t\" : \"x5t\",    \"qi\" : \"qi\",    \"x\" : \"x\",    \"y\" : \"y\",    \"alg\" : \"alg\"  } ]}", JsonWebKeySet.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JwksApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
