/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "invite", description = "the invite API")
public interface InviteApi {

    Logger log = LoggerFactory.getLogger(InviteApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "inviteExistingUser", notes = "Invite an existing user to join a service.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User was invited to the service"),
        @ApiResponse(code = 403, message = "You were unable to invite the user, you don't have permission") })
    @RequestMapping(value = "/invite/{userId}/service/{serviceId}",
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> inviteExistingUser(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "The id of the user to invite",required=true) @PathVariable("userId") String userId,@ApiParam(value = "The id of the service to onboard",required=true) @PathVariable("serviceId") String serviceId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "inviteNewUser", notes = "Invites a new user to join a service.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User was created"),
        @ApiResponse(code = 403, message = "You were unable to create the user, you don't have permission.") })
    @RequestMapping(value = "/invite",
        method = RequestMethod.POST)
    default ResponseEntity<Void> inviteNewUser(@ApiParam(value = "The Base64-encoded authorization token" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "" ,required=true )  @Valid @RequestBody uk.gov.hmcts.reform.idam.api.shared.model.RegisterRequest request) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
