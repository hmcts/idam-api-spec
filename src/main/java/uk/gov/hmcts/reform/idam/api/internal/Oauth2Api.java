/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.ErrorResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@jakarta.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "oauth2", description = "the oauth2 API")
public interface Oauth2Api {

    Logger log = LoggerFactory.getLogger(Oauth2Api.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "authorize", notes = "Initiates an OAuth2 code grant flow.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authentication is successful.", response = String.class),
        @ApiResponse(code = 401, message = "Username password combination not found"),
        @ApiResponse(code = 403, message = "The account is suspended or locked", response = ErrorResponse.class) })
    @RequestMapping(value = "/oauth2/authorize",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<String> authorize(@ApiParam(value = "Uses Basic Authentication to identifying the principal making the request. For example - `Basic dXNlcm5hbWU6cGFzc3dvcmQ=`" ,required=true) @RequestHeader(value="Authorization", required=true) String authorization,@ApiParam(value = "URI to redirect the user to after successful authentication. This URL must match one of the registered URLs for the OAuth2 application linked to the service initiating the authentication flow.") @RequestParam(value="redirect_uri", required=false)  String redirectUri,@ApiParam(value = "OAuth2 client id of the service initiating the OAuth2 flow.") @RequestParam(value="client_id", required=false)  String clientId,@ApiParam(value = "Optional state to be sent back to the initiating service after successful authentication.") @RequestParam(value="state", required=false)  String state,@ApiParam(value = "Optional scopes to request.") @RequestParam(value="scope", required=false)  String scope,@ApiParam(value = "Response type to use for this request") @RequestParam(value="response_type", required=false)  String responseType) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default Oauth2Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "getToken", notes = "Allows a user to retrieve an OAuth2 access token from an OAuth2 code. ", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authorized", response = String.class),
        @ApiResponse(code = 403, message = "Username password combination not found") })
    @RequestMapping(value = "/oauth2/token",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<String> getToken(@ApiParam(value = "" ) @RequestHeader(value="authorization", required=false) String authorization,@ApiParam(value = "OAuth2 code returned by the /authorize call. Required when grant_type=authorization_code") @RequestParam(value="code", required=false)  String code,@ApiParam(value = "URI to redirect the user to after successful authentication. The redirect URL in this request should match exactly the redirect URL that was included in the initial authorization request for this authorization code (/authorize).") @RequestParam(value="redirect_uri", required=false)  String redirectUri,@ApiParam(value = "OAuth2 client id of the service initiating the OAuth2 flow.") @RequestParam(value="client_id", required=false)  String clientId,@ApiParam(value = "OAuth2 client secret of the service initiating the OAuth2 flow.") @RequestParam(value="client_secret", required=false)  String clientSecret,@ApiParam(value = "The required scope.") @RequestParam(value="scope", required=false)  String scope,@ApiParam(value = "The grant type. Optional (defaults to 'authorization_code')") @RequestParam(value="grant_type", required=false)  String grantType) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default Oauth2Api interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
