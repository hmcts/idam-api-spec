/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.external;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:51.893+01:00")

@Api(value = "SsoFederation", description = "the SsoFederation API")
public interface SsoFederationApi {

    Logger log = LoggerFactory.getLogger(SsoFederationApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Create a new federated account.", nickname = "createFederatedUser", notes = "Create a federated account with the latest details of the user from the SSO Service Provider where the access_token was obtained. References to the SSO provider and the users ID from the provider will be retained, and permissions will be granted if appropriate. ", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, tags={ "SSO Federation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The details of the created requested user.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class),
        @ApiResponse(code = 401, message = "The supplied authorization is invalid or has expired."),
        @ApiResponse(code = 404, message = "The user does not yet have a federated account.") })
    @RequestMapping(value = "/federatedusers",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.User> createFederatedUser(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.User.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SsoFederationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Authenticate federated user.", nickname = "federationAuthenticate", notes = "Attempt to match the authenticated user with a federated account and create a new session within the IDAM system.", tags={ "SSO Federation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authentication is successful, or waiting for another call with OTP."),
        @ApiResponse(code = 401, message = "A Federated user matching the access_token was not found.") })
    @RequestMapping(value = "/federatedusers/authenticate",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> federationAuthenticate(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SsoFederationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Obtain federated user account infomation for the owner of the supplied access_token.", nickname = "getFederatedUser", notes = "", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, tags={ "SSO Federation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The details of the requested user.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class),
        @ApiResponse(code = 401, message = "The supplied authorization is invalid or has expired.") })
    @RequestMapping(value = "/federatedusers/me",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.User> getFederatedUser(@ApiParam(value = "An access_token obtained from an external SSO Provider." ,required=true) @RequestHeader(value="authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.User.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SsoFederationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a users federated account.", nickname = "updateFederatedUser", notes = "Update the users federated account with the latest details from the SSO Service Provider where the access_token was obtained. ", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class, tags={ "SSO Federation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The details of the created requested user.", response = uk.gov.hmcts.reform.idam.api.shared.model.User.class),
        @ApiResponse(code = 401, message = "The supplied authorization is invalid or has expired."),
        @ApiResponse(code = 404, message = "The user does not yet have a federated account.") })
    @RequestMapping(value = "/federatedusers/me",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<uk.gov.hmcts.reform.idam.api.shared.model.User> updateFederatedUser(@ApiParam(value = "The access token associated to the session." ,required=true) @RequestHeader(value="authorization", required=true) String authorization) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", uk.gov.hmcts.reform.idam.api.shared.model.User.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SsoFederationApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
