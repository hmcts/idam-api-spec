/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.ErrorResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "login", description = "the login API")
public interface LoginApi {

    Logger log = LoggerFactory.getLogger(LoginApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "loginUser", notes = "Login with username and password. This implements the OAuth2 password grant flow - it exchanges a username and password for an access token directly.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged in ok", response = String.class),
        @ApiResponse(code = 401, message = "Username password combination is incorrect"),
        @ApiResponse(code = 403, message = "The account is suspended or locked", response = ErrorResponse.class) })
    @RequestMapping(value = "/login",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<String> loginUser(@ApiParam(value = "The user's username", required=true) @RequestParam(value="userName", required=true)  String userName,@ApiParam(value = "The user's password", required=true) @RequestParam(value="password", required=true)  String password,@ApiParam(value = "The URI used to determine where a stale user should be redirected to after reregistration") @RequestParam(value="redirectUri", required=false)  String redirectUri) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LoginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "upliftUser", notes = "Uplift a PIN user via Login. This allows an authenticated PIN user account to be 'upgraded' to an existing LoA1 account.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully upgraded PIN account to an existing account.", response = String.class) })
    @RequestMapping(value = "/login/uplift",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<String> upliftUser(@ApiParam(value = "The existing user's username.", required=true) @RequestParam(value="userName", required=true)  String userName,@ApiParam(value = "The existing user's password.", required=true) @RequestParam(value="password", required=true)  String password,@ApiParam(value = "The authenticated PIN user's access token.", required=true) @RequestParam(value="jwt", required=true)  String jwt,@ApiParam(value = "URI to redirect the user to after successful uplift. This URL must match one of the registered URLs for the OAuth2 application linked to the service initiating the authentication flow.", required=true) @RequestParam(value="redirectUri", required=true)  String redirectUri,@ApiParam(value = "OAuth2 client id of the service initiating the uplift journey.", required=true) @RequestParam(value="clientId", required=true)  String clientId,@ApiParam(value = "Optional state to be sent back to the initiating service after successful uplift.", required=true) @RequestParam(value="state", required=true)  String state,@ApiParam(value = "Optional scope to be requested from the user.") @RequestParam(value="scope", required=false)  String scope) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default LoginApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
