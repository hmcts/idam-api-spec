/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.hmcts.reform.idam.api.internal;

import uk.gov.hmcts.reform.idam.api.internal.model.Pin;
import uk.gov.hmcts.reform.idam.api.internal.model.PinRequest;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-07-04T00:25:50.979+01:00")

@Api(value = "pin", description = "the pin API")
public interface PinApi {

    Logger log = LoggerFactory.getLogger(PinApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "createPin", notes = "Generates a new PIN to be used in 'PIN in the Post' journeys.", response = Pin.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A PIN was created", response = Pin.class),
        @ApiResponse(code = 500, message = "Internal system error") })
    @RequestMapping(value = "/pin",
        method = RequestMethod.POST)
    default ResponseEntity<Pin> createPin(@ApiParam(value = ""  )  @Valid @RequestBody PinRequest pinRequest) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"pin\" : \"pin\",  \"expiry\" : \"expiry\",  \"userId\" : \"userId\"}", Pin.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PinApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "loginWithPin", notes = "Login with PIN. The PIN must have been generated by IdAM and sent to a user as part of a 'PIN in the Post' journey.", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged in ok", response = String.class),
        @ApiResponse(code = 401, message = "Pin user not found") })
    @RequestMapping(value = "/pin",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> loginWithPin(@ApiParam(value = "" ,required=true) @RequestHeader(value="pin", required=true) String pin,@ApiParam(value = "URI to redirect the user to after login. This should be one of the URIs registered with the OAuth2 client linked to the service initiating the login.", required=true) @RequestParam(value="redirect_uri", required=true)  String redirectUri,@ApiParam(value = "OAuth2 client id of the service initiating the login.", required=true) @RequestParam(value="client_id", required=true)  String clientId,@ApiParam(value = "Optional state to be sent back to the initiating service after successful login.") @RequestParam(value="state", required=false)  String state) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PinApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
